---
title: "Why Geographic Analysis"
subtitle: "HES 505 Fall 2023: Session 2"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---
```{r}
#| echo: false
knitr::knit_hooks$set(crop = knitr::hook_pdfcrop)
```
## Checking in

1. What are some advantages and disadvantages of using `R` for spatial analysis

2. What can I clarify about the course?

3. How do you feel about git and github classroom? How can I make that easier for you?

## Today's Plan {background-image="img/slide_2/hudbay.jpeg" background-opacity="0.4"}

:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}

- What can we do with geographic information?

- Conceptual challenges

- Analytical challenges

- Critiques of quantitative geography

:::

# What can we do with spatial data? {background-image="img/slide_2/iceberg.jpeg" background-opacity="0.6"}

## What is geography

- **Geo**: land, earth, terrain

- **Graph**: writing, discourse

- Tuan: **Space** (extent) and **Place** (location)

- Analysis of the effects of extent and location on events or features

## Five Themes in Geography
::: columns
::: {.column width="40%"}
- Location

- Place

- Region

- Movement

- Human-Environment Interaction
:::
::: {.column width="60%"}
![WGBH Educational Foundation](img/slide_2/earthsys_wgbh.png)
:::
:::

## Location
The place (on Earth) of a particular geographic feature


::: {layout-ncol=2}

![](img/slide_2/zebra_usgs.png)

![](img/slide_2/fires.png)
:::
## Location
The place (on Earth) of a particular geographic feature

::: {layout-ncol=2}
![](img/slide_2/crime_map.png)

![](img/slide_2/supercharger.png)
:::

## Place
What is a location _like_?

::: {layout-ncol=2}
![](img/slide_2/forest_cover.jpg)

![](img/slide_2/ustemp.jpg)
:::

::: footer 
:::{style="font-size: 0.8em; margin-bottom: -1.em; color:#fff"}
Forest cover map by Robert Simmons via Wikimedia Commons; temp map from [GISgeography.com](https://gisgeography.com/us-temperature-map/)
:::
:::

## Place
What is a location _like_?

::: {layout-ncol=2}
![](img/slide_2/gini-map-census.png)

![](img/slide_2/climchange.png)
:::

## Region
How are different areas similar or different?

::: {layout-ncol=2}
![](img/slide_2/ecoregions.png)

![](img/slide_2/2021NLCD.png)
:::

## Region
How are different areas similar or different?

::: {layout-ncol=2}
![](img/slide_2/yall.jpg)

![](img/slide_2/CASC_Network_Simple_v1_2021.png)
:::

## Movement
How do genes, individuals, populations, ideas, goods, etc traverse the landscape.

::: {layout-ncol=2}
![](img/slide_2/moveVis.gif)

![](img/slide_2/combined.png)
:::

## Movement
How do genes, individuals, populations, ideas, goods, etc traverse the landscape.

::: {layout-ncol=2}
![](img/slide_2/hcn_migration.jpg)

![](img/slide_2/landgrabu.png)
:::
::: footer 
:::{style="font-size: 0.8em; margin-bottom: -1.em; color:#fff"}
Both maps courtesy of High Country News
:::
:::

## Human-Environment Interactions
How do people relate to and change the physical world to meet their needs?

::: {layout-ncol=2}
![](img/slide_2/smoke.png)

![](img/slide_2/nightlights.jpg)
:::
::: footer 
:::{style="font-size: 0.7em; margin-bottom: -0.80em; color:#fff"}
Smoke map courtesy of Capital Public Radio; Nightlights courtesy of NASA Earth Observatory.
:::
:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
Towards _quantitative_ spatial analysis
:::



#

```{r}
#| echo: false
#| message: false
#| crop: true
#| fig-align: center

library(ggplot2)
D <-list('Description'=c(2,3,1),'Explanation'=c(4,7,1), 'Prediction'=c(7,5))

p <- ggvenn::ggvenn(D,c("Description","Explanation", "Prediction"),show_percentage=FALSE,show_elements = FALSE, fill_color=c("#1C2D8C","#7C4A89", "#027373"), set_name_color = "white", text_size=0.00001)

p2 <- p + theme(panel.border = element_rect(color = "#A1D8EA", fill=NA),
  panel.background = element_rect(fill="#A1D8EA"),
         plot.background = element_rect(fill="#A1D8EA"),
         panel.grid.major = element_blank(),
         panel.grid.minor = element_blank())
#ggsave("venn.png", p2, bg="transparent", width=6, units = "in")
p2
```

# {background="#9F281A"}
:::{style="font-size: 1.4em"}
> ‘everything is usually related to all else but those which are near to each other
>are more related when compared to those that are further away’.
> `r tufte::quote_footer('Waldo Tobler')`
:::
## Exploration and Description: Natural Sciences
::: columns
::: {.column width="60%"}
- Range Maps
- Productivity
- Topography

:::
::: {.column width="40%"}

:::
:::

## Exploration and Description: Social Sciences

## Explanation and Inference

## Prediction

# Conceptual challenges {background="#43464B" background-image="img/slide_2/ducks.jpeg" background-opacity="0.6"}

## Scale

## Fallacies

- __Locational Fallacy:__ Error due to the spatial characterization chosen for elements of study


- __Atomic Fallacy:__ Applying conclusions from individuals to entire spatial units


- __Ecological Fallacy:__ Applying conclusions from aggregated information to individuals

# Analytical Issues

## Spatial Autocorrelation

## Stationarity

## Measurement Error and Mismatch


## Data types {}

:::{style="text-align: middle; margin-top: 0.5em"}
* The basic schema that `R` uses to store data.
 * Creates expectations for allowable values
 * Sets the "rules" for how your data can be manipulated
 * Affects storage and combination with other data types

* Four most common: __Logical__, __Numeric__, __Integer__, __Character__

:::

## Logical Data {background="#43464B" background-image="img/slide_2/ducks.jpeg" background-opacity="0.5"}

* Data take on the value of either `TRUE` or `FALSE`. 
* Special type of logical called `NA` to represent missing values
* Can be coerced to integers when numeric data is requires (`TRUE` = 1; `FALSE` = 0)

## Logical Data (cont'd)
* Can be the outcome of logical test
```{r}
#| echo: true
x <- runif(10,-10, 10) #generate 10 random numbers between -10 and 10
(y <- x > 5) #test whether the values are greater than 5 and assign to object y
typeof(y) #how is R storing the object?
mean(y) #gives the proportion of y that is greater than 5
x[c(3,6,8)] <- NA #set the 3rd, 6th, and 8th value to NA
is.na(x) #check which values are NA
```

## Numeric Data

* All of the elements of an object (or variable) are numbers that _could_ have decimals
* `R` can store this as either _double_ (at least 2 decimal points) or _integer_

```{r}
#| echo: true
x <- runif(10,-10, 10) #generate 10 random numbers between -10 and 10
typeof(x) #how is R storing the object?
class(x) #describes how R will treat the object 
```

## Integer Data
* __Integer__ data is a special case of numeric data with no decimals

```{r}
#| echo: true
mode(x) <- "integer"
x
class(x)
typeof(x)

z <- sample.int(100, size=10) #sample 10 integers between 1 and 100
typeof(z)
class(z)
```

## Character Data

* Represent _string_ values
* __Strings__ tend to be a word or multiple words
* Can be used with logical tests

```{r}
#| echo: true
char <- c("Sarah", "Tracy", "Jon") #use c() to combine multiple entries
typeof(char)
char == "Jon"
char[char=="Jon"] <- "Jeff"
char
```

## Factors

* A special case of character data

* Data contains a limited number of possible character strings (categorical variables)

* The `levels` of a factor describe the possible values (all others coerced to `NA`)

```{r}
#| echo: true
(sex <- factor(c("female", "female", "male", "female", "male")))  #by default levels are ordered alphabetically
(sex <- factor(sex, levels = c("male", "female"))) #changing the order of the levels

```

## Coercion

* Sometimes certain functions require a particular `class` of data require conversion (or coercion)
* `mode` - implicitly; `as.xxx` - explicitly

```{r}
#| echo: true
text <- c("test1", "test2", "test1", "test1") # create a character vector
class(text)
text_factor <- as.factor(text) # transform to factor
class(text_factor) # recheck the class
levels(text_factor)
as.numeric(text_factor)
```

## Data structures
* Lots of options for how `R` stores data
* Structure determines which functions work and how they behave
* `length()`, `str()`, `summary()`, `head()`, and `tail()` can help you explore
* Most of the `RSpatial` data structures build on these basic structures

## Vectors
* A 1-dimensional collection of elements with the same data type
* Combining two datatypes makes `R` choose

```{r}
#| echo: true
series.1 <- seq(10)
series.2 <- seq(from = 0.5, to = 5, by = 0.5)
series.abc <- letters[1:10]
length(series.1)
length(series.2)
class(c(series.abc, series.1)) #combine characters with numbers
```

## Vectors (cont'd)
* Can combine them or perform 'vectorized' operations

```{r}
#| echo: true
series.comb <- c(series.1, series.2)
length(series.comb)
series.add <- series.1 + series.2
length(series.add)
head(series.add)
```
* __What happens if you try to add the character vector to the numeric vector?__

## Matrices

* An extension of the numeric or character vectors to include 2-dimensions (rows and columns)
* Arrays extend the idea to multiple dimensions
* Elements of matrix must have the same data type

```{r}
#| echo: true
(m <- matrix(1:6, nrow = 2, ncol = 3)) #default is to fill by columns
dim(m)
(m <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE))
```
## Lists
* Hold a variety of different data types and structures including more lists. 
* Use a lot for functional programming (next week).


```{r}
#| echo: true
(xlist <- list(a = "Waldo", b = 1:10, data = head(mtcars)))
```
## Lists (cont'd)
* Lists store information in `slots`
* Adding `names` to a list can help with accessing data

```{r}
#| echo: true
names(xlist)
class(xlist$data)
```

## Data Frames

* Resemble tabular datasets used in spreadsheet programs 

* Long vs. wide data 

* Special type of list where every element has the same length (but can have different types of data)

```{r}
#| echo: true
(dat <- data.frame(id = letters[1:5], x = 1:5, y = rep(date(),times=5 )))
is.list(dat)
class(dat)
```
## Data Frames (cont'd)
* Lots of ways to access and summarize data in data frames
* Useful for making sure your functions are working as intended

```{r}
#| echo: true
str(dat) #compact summary of the structure of a dataframe
summary(dat) #estimate summary statistics of data frame
```

## Data Frames (one more time)
* Special cases of `names` (`colnames` and `rownames`)

```{r}
#| echo: true
colnames(dat) #get the names of the variables stored in the data frame
dat$y
```

## Tibbles
* Similar to data frames, but allow for _lists within columns_
* Designed for use with the `tidyverse`
* Foundation of `sf` objects

```{r}
#| echo: true
library(tidyverse) #load the package necessary
dat.tib <- tibble(dat)
is.list(dat.tib)

## [1] TRUE

class(dat.tib)
```


# Manipulating data in R {background="#0033A0"}

## A Note on the `tidyverse` {background-image="img/slide_2/iceberg.jpeg" background-opacity="0.6"}

* A self-contained universe of packages and functions designed to work together

* Rely on "verbs" to make coding more intuitive

* Benefits and drawbacks

## Reading Data
* The first step in any data analysis

* Depends on the file type (`.csv`, `.txt`, `.shp`)

* CHECK YOURSELF

```{r}
#| echo: true
cars <- read.table('file/cars.txt')
str(cars)
summary(cars)
```

## Reading Data (cont'd)

* `tidyverse` convention is to use "verb_object"

* For reading data that means `read_` instead of `read.`

* Different default behaviors!!

```{r}
#| echo: true
cars_tv <- read_table('file/cars.txt')
str(cars_tv)
```
## Reading Data (cont'd)
```{r}
#| echo: true
summary(cars_tv)
head(cars_tv)
```

**What do you notice??**

## Selecting Data

* We often want to access subsets of our data
* For named objects we can use `$`

```{r}
#| echo: true
speed <- cars$speed #assign the whole speed column to an object
head(speed)

```
## Selecting Data (cont'd)

* More generally we can use `[]` (can use index and logicals)
```{r}
#| echo: true
(speed2 <- cars$speed[2]) # get the vector named speed and take the 2nd element in that vector
(speed3 <- cars[4,2]) #get the vector located in the 2nd column and take the 4th element
(speed20 <- cars[cars$speed > 20,]) #return all columns where speed >20

```

## Selecting Data (cont'd)
* For lists we use `[[]]` to access a particular slot and `[]` to access data in that slot

```{r}
#| echo: true
xlist <- list(a = "Waldo", b = 1:10, data = head(mtcars))
xlist[[3]][1,2] #get the 3rd slot in the list and return the value in the 1st row, 2nd column
```

## Selecting Data (cont'd)

* In the `tidyverse` we use `select()` to choose columns

* The ` %>% ` operator allows us to link steps together
```{r}
#| echo: true
speed <- read.table('file/cars.txt') %>% 
  select(., speed)
head(speed)
```
## Selecting Data (cont'd)
* Use `slice` to get rows based on position
```{r}
#| echo: true
(speed2 <- read.table('file/cars.txt') %>% 
  select(., speed) %>% 
   slice(., 2))
```

## Selecting Data (cont'd)
* Use`filter` to choose rows that meet a condition

```{r}
#| echo: true
(speed2 <- read.table('file/cars.txt') %>% 
  filter(., speed > 20))
```
## Changing Data

* Updating data (CAUTION)

* Often using a combination of index and logicals

```{r}
#| echo: true
x <- runif(10,-10, 10) #generate 10 random numbers between -10 and 10
x[c(3,6,8)] <- NA #set the 3rd, 6th, and 8th value to NA
is.na(x) #check which values are NA
```

## Changing Data

* Creating new variables
* Can use `$` 

```{r}
#| echo: true
head(mtcars, 3)

mtcars$hpwt <- mtcars$hp/mtcars$wt
head(mtcars[,c(1, 5:12)],3)
```
 
## Changing Data

* Creating new variables
* Using `tidyverse`, `mutate` creates new variables for the entire dataset
```{r}
#| echo: true
mtcars_update <- mtcars %>% 
  mutate(., hpwt = hp/wt)
head(mtcars_update[,c(1, 5:12)], 3)
```


## Changing Data

* Creating new variables
* Using `summarise` creates group level summaries
```{r}
#| echo: true
mtcars_group <- mtcars %>% 
 group_by(., cyl) %>% 
  summarise(., meanmpg = mean(mpg))
mtcars_group
```

# Getting help {background="#0033A0"}

## 2 Kinds of Errors {background="#43464B" background-image="img/slide_2/ducks.jpeg" background-opacity="0.6"}

* **Syntax Errors**: Your code won't actually run
* **Semantic Errors**: Your code runs without error, but the result is unexpected

## Asking good questions

* What are you trying to do?

* What isn't working?

* What are you expecting?

* Why aren't common solutions working?

## Reproducible examples

* Don't require someone to have your data or your computer

* Minimal amount of information and code to reproduce your error

* Includes both code and your operating environment info

* See the `reprex` package.

# Wrap-up