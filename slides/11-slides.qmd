---
title: "Operations With Raster Data I"
subtitle: "HES 505 Fall 2022: Session 11"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background="#43464B" background-image="img/slide_10/NEDUS.gif" background-opacity="0.7"}

::: footer
Image Source: USGS
:::

## Objectives

- By the end of today, you should be able to:

  - Evaluate logical conditions with raster data

  - Calculate different measures of raster data
  
  - Align rasters for spatial processing
  
## Revisitng the Raster Data Model

::: columns
:::{.column width="50%"}
::: {style="font-size: 0.7em"}

* __Raster data__ represent spatially continuous phenomena (`NA` is possible)

* Depict the alignment of data on a regular lattice (often a square)
  * Operations mimic those for `matrix` objects in `R` 

* Geometry is implicit; the spatial extent and number of rows and columns define the cell size
:::
:::
::: {.column width="50%"}
```{r}
#| fig-height: 6
#| fig-width: 6
library(terra)
filename <- system.file("ex/elev.tif", package="terra")
r <- rast(filename)
plot(r, col=gray(0:1000/1000), main = "Elevation (m)")
```
:::
:::

# Predicates and measures in `terra` {background="#0033A0"}

## Extending predicates

- __Predicates__: evaluate a logical statement asserting that a property is `TRUE` 

- `terra` does not follow the same hierarchy as `sf` so a little trickier

## Unary predicates in `terra`

* Can tell us qualities of a raster dataset

* Many similar operations for `SpatVector` class (note use of `.`)

::: {style="font-size: 0.7em"}
|predicate            |asks...                                                  |
|---------------------|--------------------------------------------------------------|
|`is.lonlat`             |Does the object have a longitude/latitude CRS?|
|`inMemory`              |is the object stored in memory?|
|`is.factor`              |Are there categorical layers?|
|`hasValues`              |Do the cells have values?|
:::

## Unary predicates in `terra`

::: columns
:::{.column width="50%"}
::: {style="font-size: 0.7em"}
* `global`: tests if the raster covers all longitudes (from -180 to 180 degrees) such that the extreme columns are in fact adjacent
```{r}
#| echo: true
r <- rast()
is.lonlat(r)
is.lonlat(r, global=TRUE)
```
:::
:::
::: {.column width="50%"}
::: {style="font-size: 0.7em"}
* `perhaps`: If TRUE and the crs is unknown, the method returns TRUE if the coordinates are plausible for longitude/latitude

```{r}
#| echo: true
crs(r) <- ""
is.lonlat(r)
is.lonlat(r, perhaps=TRUE, warn=FALSE)
```


```{r}
#| echo: true
crs(r) <- "+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84"
is.lonlat(r)
```
:::
:::
:::

## Binary predicates in `terra`

* Take exactly 2 inputs, return 1 matrix of cell locs where value is `TRUE`

* `adjacent`: identifies cells adajcent to a set of raster cells

![](img/slide_9/cases.gif)

## Unary measures in `terra`

* Slightly more flexible than `sf` 

* One result for each layer in a stack

::: {style="font-size: 0.5em"}
|measure              |returns                                                       |
|---------------------|--------------------------------------------------------------|
|`cellSize`          |area of individual cells|
|`expanse`               |summed area of all cells|
|`values`             |returns all cell values|
|`ncol`             |number of columns|
|`nrow`             |number of rows|
|`ncell`             |number of cells|
|`res`             |resolution|
|`ext`             |minimum and maximum of x and y coords|
|`origin`             |the orgin of a `SpatRaster`|
|`crs`             |the coordinate reference system|
|`cats`             |categories of a categorical raster|
:::

## Binary measures in `terra`

* Returns a matrix or `SpatRaster` describing the measure

::: {style="font-size: 0.5em"}
|measure              |returns                                                       |
|---------------------|--------------------------------------------------------------|
|`distance`          |shortest distance to non-NA or vector object|
|`gridDistance`               |shortest distance through adjacent grid cells|
|`costDistance`             |Shortest distance considering cell-varying friction|
|`direction`             |azimuth to cells that are not `NA`|
:::

# Aligning rasters {background="#0033A0"}

## Projecting raster data

::: columns
:::{.column width="50%"}
::: {style="font-size: 0.7em"}
* Transformation from lat/long to planar CRS involves some loss of precision
* New cell values estimated using overlap with original cells
* Interpolation for continuous data, nearest neighbor for categorical data
* Equal-area projections are preferred; especially for large areas
:::
:::
::: {.column width="50%"}
::: {style="font-size: 0.7em"}

```{r}
#| echo: true
r <- rast(xmin=-110, xmax=-90, ymin=40, ymax=60, ncols=40, nrows=40)
values(r) <- 1:ncell(r)
plot(r)
```

:::
:::
:::

## Projecting raster data

::: columns
:::{.column width="50%"}
* simple method; alignment not guaranteed

```{r newproj1, fig.height=4, fig.width=4}
#| echo: true
newcrs <- "+proj=robin +datum=WGS84"
pr1 <- terra::project(r, newcrs)
plot(pr1)
```
:::
:::{.column width="50%"}
* providing a template to ensure alignment
```{r newproj2,  fig.height=4, fig.width=4}
x <- rast(pr1)
# Set the cell size
res(x) <- 200000
pr3 <- terra::project(r, x)
plot(pr3)
```
:::
:::

## Changing resolutions
* `aggregate`, `disaggregate`, `resample` allow changes in cell size
* `aggregate` requires a function (e.g., `mean()` or `min()`) to determine what to do with the grouped values

* `resample` allows changes in cell size __and__ shifting of cell centers (slower)

## Changing resolutions: aggregate

::: columns
:::{.column width="50%"}
```{r agg1}
#| echo: true
r <- rast()
values(r) <- 1:ncell(r)
plot(r)
```
]
:::
:::{.column width="50%"}
```{r agg2}
#| echo: true
ra <- aggregate(r, 20)
plot(ra)
```
:::
:::

## Changing resolutions: disagg

::: columns
:::{.column width="50%"}
```{r agg3}
#| echo: true
ra <- aggregate(r, 20)
plot(ra)
```
:::
:::{.column width="50%"}
```{r agg4}
#| echo: true
rd <- disagg(r, 20)
plot(rd)
```
:::
:::

## Changing Resolutions: resample

```{r resamp}
#| echo: true
r <- rast(nrow=3, ncol=3, xmin=0, xmax=10, ymin=0, ymax=10)
values(r) <- 1:ncell(r)
s <- rast(nrow=25, ncol=30, xmin=1, xmax=11, ymin=-1, ymax=11)
x <- resample(r, s, method="bilinear")
```

```{r resampplot, echo=FALSE}
opar <- par(no.readonly =TRUE)
par(mfrow=c(1,2))
plot(r)
plot(x)
par(opar)
```

## On Weds

* Transformations of data and coverage
* Raster math
* Cell-based functions