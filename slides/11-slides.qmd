---
title: "Operations With Vector Data I"
subtitle: "HES 505 Fall 2023: Session 11"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background="#43464B" background-image="img/slide_10/NEDUS.gif" background-opacity="0.7"}

::: footer
Image Source: USGS
:::

## Objectives

By the end of today, you should be able to:

* Recognize the unary, binary, and n-ary transformers

* Articulate common uses for unary and binary transformers

* Use unary transformations to fix invalid geometries

* Implement common binary transformers to align and combine data

## Revisiting `predicates` and `measures`

- __Predicates__: evaluate a logical statement asserting that a property is `TRUE` 

- __Measures__: return a numeric value with units based on the units of the CRS

- Unary, binary, and n-ary distinguish how many geometries each function accepts and returns

## Transformations
::: {style="font-size: 0.7em"}
- __Transformations__: create new geometries based on input geometries
:::
::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| message: false
library(sf)
library(spData)
library(tidyverse)
seine_simp = st_simplify(seine, dTolerance = 5000)  # 2000 m


par(mfrow=c(1,2))
plot(seine, main="Original Data")
plot(seine_simp, main="Simplified")

```
:::
::: {.column width="50%"}
```{r}
#| message: false
nc <- st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)

plot(st_geometry(nc))
plot(st_geometry(st_centroid(nc)), add=TRUE, col='red')
par(mfrow=c(1,1))
```
:::
:::
  
## Unary Transformations

::: {style="font-size: 0.4em"}

|transformer               |returns a geometry ...                                                              |
|--------------------------|----------------------------------------------------------------------------------|
|`centroid`|of type `POINT` with the geometry's centroid|
|`buffer`|that is larger (or smaller) than the input geometry, depending on the buffer size|
|`jitter` |that was moved in space a certain amount, using a bivariate uniform distribution|
|`wrap_dateline`|cut into pieces that do no longer cover the dateline|
|`boundary`|with the boundary of the input geometry|
|`convex_hull`|that forms the convex hull of the input geometry|
|`line_merge`|after merging connecting `LINESTRING` elements of a `MULTILINESTRING` into longer `LINESTRING`s.|
|`make_valid`|that is valid |
|`node`|with added nodes to linear geometries at intersections without a node; only works on individual linear geometries|
|`point_on_surface`|with a (arbitrary) point on a surface|
|`polygonize`|of type polygon, created from lines that form a closed ring|
:::

# Common Unary Transformations {background="#9F281A"}

## Fixing geometries

- When `all(st_is_valid(your.shapefile))` returns `FALSE`

::: columns
::: {.column width=60%}
::: {style="font-size: 0.8em"}
- `st_make_valid` has two methods: 
  -   original converts rings into noded lines and extracts polygons
  -   structured makes rings valid first then merges/subtracts from existing polgyons
  -   Verify that the output is what you expect!!
  
:::
:::
::: {.column width=40%}
```{r}
#| echo: fenced
x = st_sfc(st_polygon(list(rbind(c(0,0),c(0.5,0),c(0.5,0.5),c(0.5,0),c(1,0),c(1,1),c(0,1),c(0,0)))))
st_is_valid(x)
```

```{r}
#| fig-width: 6

plot(x)
```
:::
:::

## Fixing geometries with `st_make_valid`

::: columns
::: {.column width="40%"}
```{r}
#| fig-width: 7
y <- x %>% st_make_valid()
plot(y)
```
:::
::: {.column width="60%}
```{r}
#| echo: fenced

y <- x %>% st_make_valid()
st_is_valid(y)
```
:::
:::


## Fixing Geometries with `st_buffer`

::: columns
:::{.column width=60%}
-`st_buffer` enforces valid geometries as an output

- Setting a 0 distance buffer leaves most geometries unchanged

- Not all transformations do this
:::
:::{.column width="40%"}
```{r}
#| echo: fenced

z <- x %>% st_buffer(., dist=0)

st_is_valid(z)
```

```{r}
#| fig-width: 7
plot(z)
```
:::
:::


## Changing `CRS` with `st_transform`

- You've already been using this!!

- Does not guarantee valid geometries (use `check = TRUE` if you want this)

- We'll try to keep things from getting too complicated

```{r}
#| cache: true
#| message: false

library(tigris)

b <- states(progress_bar = FALSE) %>% 
  filter(STUSPS %in% c("WA", "OR", "ID"))
b.a <- b %>% st_transform(., crs = 2991)
b.b <- b %>% st_transform(., crs = 5070)

```

```{r}
#| fig-width: 14
#| fig-align: center

par(mfrow=c(1,3), cex.main = 3)
plot(b$geometry, main = "Geodetic")
plot(b.a$geometry, main = "Lambert Conformal")
plot(b.b$geometry, main = "Albers Equal Area")
par(mfrow=c(1,1), cex.main=1.2)
```

## Converting areas to points with `st_centroid` or `st_point_on_surface` 

::: columns
::: {.column width="30%"}
::: {style="font-size: 0.8em"}
- For "sampling" other datasets

- To simplify distance calculations

- To construct networks
:::
:::
:::{.column width="70%"}
```{r}
#| echo: true

id.counties <- tigris::counties(state = "ID", progress_bar=FALSE)
id.centroid <- st_centroid(id.counties)
id.pointonsurf <- st_point_on_surface(id.counties)

```
```{r}
plot(id.centroid$geometry, col="red")
plot(id.pointonsurf$geometry, col="blue", add=TRUE)
```
:::
:::
## Creating "sampling areas" 

- Uncertainty in your point locations

- Incorporate a fixed range around each point

- Combine multiple points into a single polygon

```{r}
#| message: false
landmarks.id.csv <- read_csv("/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/landmarks_ID.csv")

```

```{r}
#| echo: true

hospitals.id <- landmarks.id.csv %>% 
  st_as_sf(., coords = c("longitude", "lattitude")) %>% 
  filter(., MTFCC == "K1231")
st_crs(hospitals.id) <- 4326

```


## Creating sampling areas
```{r}
#| echo: true

hospital.buf <- hospitals.id %>%
  st_buffer(., dist=10000)

hospital.mcp <- hospitals.id %>% 
  st_convex_hull(.)
```

```{r}
par(mfrow=c(1,3), cex.main = 3)
plot(hospitals.id$geometry, main = "Original")
plot(hospital.buf$geometry, main = "Buffer 10km")
plot(hospital.mcp$geometry, main = "MCP")
par(mfrow=c(1,1), cex.main=1.2)

```

## Other Unary Transformations 

::: {style="font-size: 0.4em"}
|transformer               |returns a geometry ...                                                              |
|--------------------------|----------------------------------------------------------------------------------|
|`segmentize`|a (linear) geometry with nodes at a given density or minimal distance|
|`simplify`|simplified by removing vertices/nodes (lines or polygons)|
|`split`|that has been split with a splitting linestring|
|`transform`|transformed or convert to a new coordinate reference system (chapter \@ref(cs))|
|`triangulate`|with Delauney triangulated polygon(s) (figure \@ref(fig:vor))|
|`voronoi`|with the Voronoi tessellation of an input geometry (figure \@ref(fig:vor))|
|`zm`|with removed or added `Z` and/or `M` coordinates|
|`collection_extract`|with subgeometries from a `GEOMETRYCOLLECTION` of a particular type|
|`cast`|that is converted to another type|
|`+`|that is shifted over a given vector|
|`*`|that is multiplied by a scalar or matrix|
:::

# Binary Transformers {background="#9F281A"}

## Binary Transformers
::: {style="font-size: 0.4em"}

|function           |returns                                                    |infix operator|
|-------------------|-----------------------------------------------------------|:------------:|
|`intersection`     |the overlapping geometries for pair of geometries          |`&`|
|`union`            |the combination of the geometries; removes internal boundaries and duplicate points, nodes or line pieces|`|`|
|`difference`       |the geometries of the first after removing the overlap with the second geometry|`/`|
|`sym_difference`   |the combinations of the geometries after removing where they intersect; the negation (opposite) of `intersection`|`%/%`|
| `crop`            | crop an sf object to a specific rectangle |
:::

## Binary Transformers
![](img/slide_9/venn-clip-1.png)

## Common Uses of Binary Transformers

* Relating partially overlapping datasets to each other

* Reducing the extent of vector objects

## N-ary Transformers

* Similar to Binary (except `st_crop`)

* `union` can be applied to a set of geometries to return its
geometrical union

* `intersection` and `difference` take a single argument,
but operate (sequentially) on all pairs, triples, quadruples, etc.


  
