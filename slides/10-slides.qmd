---
title: "Introduction to Mapping Geographic Data"
subtitle: "HES 505 Fall 2023: Session 10"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background="#43464B" background-image="img/slide_10/NEDUS.gif" background-opacity="0.7"}

::: footer
Image Source: USGS
:::

## Objectives

- By the end of today, you should be able to:

*   Describe the basic components of data visualization as a foundation for mapping syntax

*   Understand layering in both base `plot` and `tmap`

*   Make basic plots of multiple spatial data objects
  
# Using `plot` {background="#9F281A"}

## Which packages have `plot` methods?

::: columns
::: {.column width="40%"}
* Often the fastest way to view data

* Use `?plot` to see which packages export a method for the `plot` function

* Or you can use `?plot.***` to see which classes of objects have plot functions defined

:::
::: {.column width="60%"}
![](img/slide_10/plotfuns.png)
:::
:::

## `plot` for `sf` objects

* Can plot outlines using `plot(st_geometry(your.shapfile))` or `plot(your.shapefile$geometry)`

* Plotting attributes requires "extracting" the attributes (using `plot(your.shapefile["ATTRIBUTE"])`)

* Controlling aesthetics can be challenging

* layering requires `add=TRUE`

## `plot` for `sf` objects

```{r}
library(sf)
library(tidyverse)
library(viridis)
library(terra)
cejst <- sf::read_sf("/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/cejst_nw.shp") %>% 
  filter(!st_is_empty(.))
  

wildfire.haz <- terra::rast("/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/wildfire_hazard_agg.tif")

land.use <- project(terra::rast("/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment05/land_use_pnw.tif"), wildfire.haz)
rast.data <- c(wildfire.haz, land.use)

```

::: columns
:::{.column width="50%"}
```{r}
#| echo: true

plot(st_geometry(cejst))

```
:::
:::{.column width="50%}
```{r}
#| echo: true

plot(cejst["EALR_PFS"])

```
:::
:::

## `plot` for `SpatRasters`

```{r}
#| echo: true
#| fig-width: 12

plot(rast.data)

```

## `plot` for `SpatRasters`

```{r}
#| echo: true
#| fig-width: 12

plot(rast.data["WHP_ID"], col=heat.colors(24, rev=TRUE))

```

## Combining the two with `add=TRUE`

```{r}
#| echo: true

plot(rast.data["WHP_ID"], col=heat.colors(24, rev=TRUE))
plot(st_geometry(st_transform(cejst, crs=crs(rast.data))), add=TRUE)

```

# Thinking about map construction {background="#9F281A"}

## Grammar of Graphics (Wilkinson 2005)

- _Grammar_: A set of structural rules that help establish the components of a language

- System and structure of language consist of _syntax_ and _semantics_

- _Grammar of Graphics_: a framework that allows us to concisely describe the components of any graphic

- Follows a layered approach by using defined components to build a visualization

- `ggplot2` is a formal implementation in `R`


#
![](img/slide_10/gg_pyramid.png)



## Aesthetics: Mapping Data to Visual Elements

::: columns
::: {.column width="40%"}
::: {style="font-size: 0.7em"}
- Define the systematic conversion of data into elements of the visualization

- Are either categorical or continuous (exclusively)

- Examples include `x`, `y`, `fill`, `color`, and `alpha`
:::
:::
::: {.column width="60%"}
![From Wilke 2019](img/slide_10/tbl.png)
:::
:::

## Scales

- Scales map data values to their aesthetics

- Must be a one-to-one relationship; each specific data value should map to only one aesthetic

# Adding aesthetics with `tmap`{background="#9F281A"}

## Using `tmap`

```{r}
#| echo: true
library(sf)
library(terra)
library(tmap)
pt <- tm_shape(cejst) + 
  tm_polygons(col = "EALR_PFS",
              border.col = "white") + 
  tm_legend(outside = TRUE)
```

## Using `tmap`

```{r}
pt
```

## Changing aesthetics

```{r}
#| echo: true
pt <- tm_shape(cejst) + 
  tm_polygons(col = "EALR_PFS", n=10,palette=viridis(10),
              border.col = "white") + 
  tm_legend(outside = TRUE)
```

## Changing aesthetics

```{r}
pt
```

## Adding layers

**ORDER MATTERS**

```{r}
#| echo: true
st <- tigris::states(progress_bar=FALSE) %>% filter(STUSPS %in% c("ID", "WA", "OR")) %>% st_transform(., crs = st_crs(cejst))
pt <- tm_shape(cejst) + 
  tm_polygons(col = "EALR_PFS", n=10,palette=viridis(10),
              border.col = "white") + 
  tm_shape(st) +
  tm_borders("red") +
  tm_legend(outside = TRUE)

```

## Adding layers
```{r}
pt
```

## Integrating Rasters 

```{r}
#| echo: true
cejst.proj <- st_transform(cejst, crs=crs(rast.data)) %>% filter(!st_is_empty(.))
states.proj <- st_transform(st, crs=crs(rast.data))
pal8 <- c("#33A02C", "#B2DF8A", "#FDBF6F", "#1F78B4", "#999999", "#E31A1C", "#E6E6E6", "#A6CEE3")
pt <- tm_shape(rast.data["category"]) +
  tm_raster(palette = pal8) +
  tm_shape(cejst.proj) + 
  tm_polygons(col = "EALR_PFS", n=10,palette=viridis(10),
              border.col = "white") + 
  tm_shape(states.proj) +
  tm_borders("red") +
  tm_legend(outside = TRUE)

```

## Integrating Rasters 

```{r}
pt
```