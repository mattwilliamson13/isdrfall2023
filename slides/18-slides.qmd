---
title: "Overlays"
subtitle: "HES 505 Fall 2022: Session 18"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

```{r}
#| include: false
library(tidycensus)
library(sf)
library(tidyverse)
library(socviz)
library(maps)
library(tmap)
library(spData)
library(terra)
library(maptools)
library(spatstat)
library(tmap)
library(gstat)
library(spdep)
```

# Objectives {background="#0033A0"}

By the end of today you should be able to:

- integrate a covariate into KDE's

- Describe the utility and shortcomings of overlay analysis

- Describe and implement different overlay approaches

## Re-visiting Density Methods 

::: columns
::: {.column width="60%"}

* The overall _intensity_ of a point pattern is a crude density estimate

$$
\begin{equation}
\hat{\lambda} = \frac{\#(S \in A )}{a}
\end{equation}
$$

* Local density = quadrat counts
:::
::: {.column width="40%"}
```{r}
#| fig-width: 5
#| fig-height: 5
nclust <- function(x0, y0, radius, n) {
              return(runifdisc(n, radius, centre=c(x0, y0)))
            }
x <- rpoispp(lambda =50)
Q = quadratcount(x)
plot(x, main="")
plot(Q, add=TRUE)
```
:::
:::


## Kernel Density Estimates (KDE)

$$
\begin{equation}
\hat{f}(x) = \frac{1}{nh_xh_y} \sum_{i=1}^n k\bigg(\frac{{x-x_i}}{h_x},\frac{{y-y_i}}{h_y} \bigg)
\end{equation}
$$
::: {style="font-size: 0.7em"}
* Assume each location in $\mathbf{s_i}$ drawn from unknown distribution

* Distribution has probability density $f(\mathbf{x})$

* Estimate $f(\mathbf{x})$ by averaging probability "bumps" around each location

* Need different object types for most operations in `R` (`as.ppp`)
:::

## Kernel Density Estimates (KDE)
::: {style="font-size: 0.7em"}
* $h$ is the bandwidth and $k$ is the kernel

* We can use `stats::density` to explore

* __kernel__: defines the shape, size, and weight assigned to observations in the window

* __bandwidth__ often assigned based on distance from the window center

```{r}
x <- rpoispp(lambda =500)
K1 <- density(x, bw=2)
K2 <- density(x, bw=100)
K3 <- density(x, bw=2, kernel="disc")
```
:::
```{r}
par(mfrow=c(1,3))
plot(K1, main="Bandwidth=2")
plot(K2, main="Bandwidth=100")
plot(K3, main="Bandwidth=2, kernel=disc")
par(mfrow=c(1,1))
```

## Kernel Density Estimates (KDE)

* What if we imagine _intensity_ is a function of another covariate

::: columns
::: {.column width="50%}
```{r}
#| fig-width: 5
#| fig-height: 5
load(url("https://github.com/mgimond/Spatial/raw/main/Data/ppa.RData"))
ma <- readRDS("file/ma.rds")


# Load an MA.shp polygon shapefile 
    s  <- as(ma, "sf")
    w  <- as.owin(s)
    w.km <- rescale(w, 1000) 

    # Load a starbucks.shp point feature shapefile
    s  <- st_read("file/Starbucks.shp", quiet=TRUE)  
    starbucks  <- as.ppp(s)
    marks(starbucks) <- NULL
    Window(starbucks) <- w     
    
    # Load a pop_sqmile.img population density raster layer
    img  <- raster::raster("file/pop_sqmile.img")
    pop  <- as.im(img)
Q <- quadratcount(starbucks, nx= 6, ny=3)
plot(starbucks, pch=20, cols="grey70", main=NULL)  # Plot points
plot(Q, add=TRUE)  # Add quadrat grid    
```
:::
::: {.column width="50%"}
```{r}
#| fig-width: 5
#| fig-height: 5
plot(log(pop))
```
:::
:::

## Adding a Covariate to KDE

* `rhohat` computes nonparametric intensity $\rho$ as a function of a covariate

$$
\begin{equation}
\lambda(u) = \rho(Z(u))
\end{equation}
$$


```{r}
starbucks.km <- rescale(starbucks, 1000, "km")
ma.km <- rescale(w, 1000, "km")
pop.km    <- rescale(pop, 1000, "km")
pop.lg <- log(pop)
pop.lg.km <- rescale(pop.lg, 1000, "km")
rho <- rhohat(starbucks.km, pop.lg.km,  method="ratio")
```

## Adding a Covariate to KDE

::: columns
::: {.column width="50%"}
```{r}
plot(rho, las=1, main=NULL, legendargs=list(cex=0.8, xpd=TRUE, inset=c(1.01, 0) ))
```
:::
::: {.column width="50%"}
```{r}
pred <- predict(rho)
cl   <- interp.colours(c("lightyellow", "orange" ,"red"), 100) # Create color scheme
plot(pred, col=cl, las=1, main=NULL, gamma = 0.25)
```
:::
:::

## Adding a Covariate to KDE
* We can also think more generatively

* Model explicitly as a Poisson Point Process using `ppm`

$$
\begin{equation}
\lambda(u) = \exp^{Int + \beta X}
\end{equation}
$$

```{r}
#| echo: true
# Create the Poisson point process model
PPM1 <- ppm(starbucks.km ~ pop.lg.km)
# Plot the relationship

```

## Adding a Covariate to KDE

::: columns
::: {.column width="50%"}
```{r}
PPM1
```
:::
::: {.column width="50%"}
```{r}
#| fig-width: 6
#| fig-height: 6
plot(effectfun(PPM1, "pop.lg.km", se.fit=TRUE), main=NULL, 
     las=1, legendargs=list(cex=0.8, xpd=TRUE, inset=c(1.01, 0) ))
```
:::
:::

# Overlays {background="#0033A0"}

## Overlays

* Methods for identifying optimal site selection or suitability

* Apply a common scale to diverse or disimilar outputs

## Getting Started

::: {style="font-size: 0.7em"}
1. Define the problem.

2. Break the problem into submodels.

3. Determine significant layers.

4. Reclassify or transform the data within a layer.

5. Add or combine the layers.

6. Verify
:::

## Boolean Overlays

::: columns
::: {.column width="50%"}
* Successive disqualification of areas

* Series of "yes/no" questions

* "Sieve" mapping
:::
:::{.column width="50%"}
![](img/slide_18/Gis_layers.png)
:::
:::

## Boolean Overlays

* Reclassifying

* Which types of land are appropriate

```{r}
#| echo: true
#| fig-width: 5
#| fig-height: 5
nlcd <-  rast(system.file("raster/nlcd.tif", package = "spDataLarge"))
plot(nlcd)
```

## Boolean Overlays

* Which types of land are appropriate?

```{r}
#| echo: true
#| fig-width: 6
#| fig-height: 6
nlcd.segments <- segregate(nlcd)
names(nlcd.segments) <- levels(nlcd)[[1]][-1,2]
plot(nlcd.segments)
```
## Boolean Overlays

* Which types of land are appropriate?

```{r}
srtm <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
slope <- terrain(srtm, v = "slope")
par(mfrow=c(1,2))
plot(srtm)
plot(slope)
par(mfrow=c(1,1))
```

## Boolean Overlays

* Make sure data is aligned!

```{r}
#| echo: true
suit.slope <- slope < 10
suit.landcov <- nlcd.segments["Shrubland"]
suit.slope.match <- project(suit.slope, suit.landcov)
suit <- suit.slope.match + suit.landcov

```
## Boolean Overlays

```{r}
#| fig-width: 6
#| fig-height: 6
par(mfrow=c(1,3))
plot(suit.slope)
plot(suit.landcov)
plot(suit)
par(mfrow=c(1,1))
```

## Challenges with Boolean Overlays

1. Assume relationships are really Boolean

2. No measurement error

3. Categorical measurements are known exactly

4. Boundaries are well-represented

## A more general approach

* Define a _favorability_ metric

$$
\begin{equation}
F(\mathbf{s}) = \prod_{M=1}^{m}X_m(\mathbf{s})
\end{equation}
$$

## Weighted Linear Combinations

$$
\begin{equation}
F(\mathbf{s}) = \frac{\sum_{M=1}^{m}w_mX_m}{\sum_{M=1}^{m}w_i}
\end{equation}
$$