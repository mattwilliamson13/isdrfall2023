---
title: "Vector Operations Part 1"
subtitle: "HES 505 Fall 2022: Session 8"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background-image="img/slide_8/Hyde_Park-Kenwood_map.jpg" background-opacity="0.7"}

::: footer
Image Source: Wikimedia Commons
:::

## Objectives

By the end of today, you should be able to: 

- Understand `predicates` and `measures` in the context of spatial operations in `sf`

- Define valid geometries and approaches for assessing geometries in `R`

- Use `st_*` and `sf_*` to evaluate attributes of geometries and calculate measurements

# Understanding the language {background="#0033A0"}

## Revisiting Simple Features
::: columns
::: {.column width="40%"}
::: {style="font-size: 0.7em"} 
- The `sf` package relies on a simple feature data model to represent geometries
  - hierarchical
  - standardized methods
  - complementary binary and human-readable encoding
:::
:::
::: {.column width="60%"}
::: {style="font-size: 0.5em"} 
| type                      | description                                                               |
|---------------------------|---------------------------------------------------------------------------|
| `POINT`                   | single point geometry |
| `MULTIPOINT`              | set of points |
| `LINESTRING`              | single linestring (two or more points connected by straight lines) |
| `MULTILINESTRING`         | set of linestrings |
| `POLYGON`                 | exterior ring with zero or more inner rings, denoting holes |
| `MULTIPOLYGON`            | set of polygons |
| `GEOMETRYCOLLECTION`      | set of the geometries above  |
:::
:::
:::

## Standaridized Methods
:::{style="font-size: 0.8em; text-align: middle"}
We can categorize `sf` operations based on what they return and/or how many geometries they accept as input.
:::
::: columns
::: {.column width="50%"}
::: {style="font-size: 0.7em"} 
- *Output Categories*
  - __Predicates__: evaluate a logical statement asserting that a property is `TRUE` 

  - __Measures__: return a numeric value with units based on the units of the CRS

  - __Transformations__: create new geometries based on input geometries.
:::
:::
::: {.column width="50%"}
::: {style="font-size: 0.7em"}
- *Input Geometries*

  - __Unary__: operate on a single geometry at a time (meaning that if you have a `MULTI*` object the function works on each geometry individually)
  - __Binary__: operate on pairs of geometries
  - __n-ary__: operate on sets of geometries
:::
:::
:::

# Unary Predicates and Valid Geometries {background="#0033A0"}

## Remembering Valid Geometries

- A `linestring` is _simple_ if it does not intersect

::: columns
::: {.column width="60%"}
```{r}
#| echo: true
library(sf)
(ls = st_linestring(rbind(c(0,0), c(1,1), 
                          c(2,2), c(0,2), 
                          c(1,1), c(2,0))))
c(is_simple = st_is_simple(ls))
```
:::
::: {.column width="40%"}
```{r}
plot(ls)
```
:::
:::

## Remembering Valid Geometries

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- Valid polygons
  - Are closed (i.e., the last vertex equals the first)
  - Have holes (inner rings) that inside the the exterior boundary
  - Have holes that touch the exterior at no more than one vertex (they don't extend across a line)
    - For multipolygons, adjacent polygons touch only at points
  - Do not repeat their own path
:::
:::
::: {.column width="40%"}
```{r}
p1 = st_as_sfc("POLYGON((0 0, 0 10, 10 0, 10 10, 0 0))")
plot(p1)
```
:::
:::

## Empty Geometries

* Empty geometries arise when an operation produces `NULL` outcomes (like looking for the intersection between two non-intersecting polygons)

* `sf` allows empty geometries to make sure that information about the data type is retained

* Similar to a `data.frame` with no rows or a `list` with `NULL` values

* Most vector operations require simple, valid geometries

## Using Unary Predicates

* Unary predicates accept single geometries (or geometry collections)
* Provide helpful ways to check whether your data is ready to analyze
* Use the `st_` prefix and return `TRUE/FALSE`

::: {style="font-size: 0.5em"}
|predicate            |asks...                                                  |
|---------------------|--------------------------------------------------------------|
|`is_simple`             |is the geometry self-intersecting (i.e., simple)?|
|`is_valid`              |is the geometry valid?|
|`is_empty`              |is the geometry column of an object empty?|
|`is_longlat`            |does the object have geographic coordinates? (`FALSE` if coords are projected, `NA` if no `crs`)|
|`is(geometry, class)` | is the geometry of a particular class?|
:::

## Using Unary Predicates
::: columns
::: {.column width="60%"}
```{r}
#| echo: true
nc <- st_read(
  system.file("shape/nc.shp", package="sf"), 
  quiet=TRUE)
plot(st_geometry(nc))
```
:::
::: {.column width="40%"}
```{r}
#| echo: true
st_is_longlat(nc)
any(is.na(st_is_valid(nc)))

```
:::
:::

## Checking Geometries With Unary Predicates

* Before conducting costly analyses, it's worth checking for:

::: {style="font-size: 0.7em"}
1. empty geometries, using `any(is.na(st_dimension(x)))`
2. corrupt geometries, using `any(is.na(st_is_valid(x)))`
3. invalid geometries, using `any(na.omit(st_is_valid(x)) == FALSE)`; in case of corrupt and/or invalid geometries,
4. in case of invalid geometries, query the reason for invalidity by `st_is_valid(x, reason = TRUE)`
:::

Invalid geometries will require __transformation__ (next week!)

# Binary Predicates {background="#0033A0"}

## Binary Predicates
::: {style="font-size: 0.7em"}
* Accept exactly two geometries (or collections)
* Also return `logical` outcomes
* Based on the Dimensionally Extended 9-Intersection Model (DE-9IM) 
:::
::: {style="font-size: 0.4em"}
|predicate                   |meaning                                                          |inverse of      |
|----------------------------|-----------------------------------------------------------------|----------------|
|`contains`                  |None of the points of A are outside B| `within`|
|`contains_properly`         |A contains B and B has no points in common with the boundary of A| |
|`covers`                    |No points of B lie in the exterior of A| `covered_by`|
|`covered_by`                |Inverse of `covers`| |
|`crosses`                   |A and B have some but not all interior points in common| |
|`disjoint`                  |A and B have no points in common| `intersects`|
|`equals`                    |A and B are topologically equal: node order or number of nodes may differ; identical to A contains B AND A within B|
|`equals_exact`              |A and B are geometrically equal, and have identical node order| |
|`intersects`                |A and B are not disjoint| `disjoint`|
|`is_within_distance`        |A is closer to B than a given distance|
|`within`                    |None of the points of B are outside A| `contains`|
|`touches`                   |A and B have at least one boundary point in common, but no interior points|  |
|`overlaps`                  |A and B have some points in common; the dimension of these is identical to that of A and B|  |
|`relate`                    |given a mask [pattern](https://en.wikipedia.org/wiki/DE-9IM), return whether A and B adhere to this pattern| |
:::


# Measures {background="#0033A0"}

## Measures

**Unary Measures**
  
  * Return quantities of individual geometries
  
::: {style="font-size: 0.5em"}
|measure              |returns                                                       |
|---------------------|--------------------------------------------------------------|
|`dimension`          |0 for points, 1 for linear, 2 for polygons, possibly `NA` for empty geometries|
|`area`               |the area of a geometry|
|`length`             |the length of a linear geometry|
:::

**Binary Measures**
  
  * `st_distance` returns the distance between pairs of geometries