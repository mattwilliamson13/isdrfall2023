---
title: "Introduction to Spatial Data"
subtitle: "HES 505 Fall 2023: Session 3"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

## Today's Plan {background-image="img/slide_3/sweden.png" background-opacity="0.8"}

:::{style="font-size: 1.4em; text-align: middle; margin-top: 1em; color:#fff"}

1. Ways to view the world

2. What makes data (geo)spatial?

3. Coordinate Reference Systems

4. Geometries, support, and spatial messiness

:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
How do you view the world?
:::


## ...As a Series of **Objects**?

::: columns
::: {.column width="50%"}
::: incremental
- The world is a series of _entities_ located in space.

- Usually distinguishable, discrete, and bounded

- Some spaces can hold multiple entities, others are empty

- Objects are digital representations of entities
:::
:::

::: {.column width="50%"}
![](img/slide_3/bench.jpg)
:::
:::

## ...As a Continuous Field

::: columns
::: {.column width="50%"}
::: incremental
- The earth is a single entity with properties that vary continuosly through space

- Spatial continuity: Every cell has a value (including "no data" or "not here")

- Self-definition: the values define the field 

- Space is tessellated: cells are mutually exclusive
:::
:::

::: {.column width="50%"}
![](img/slide_3/LIDAR.png)
:::
:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
How did the data arise?
:::

## Spatial data as a stochastic process


:::{style="font-size: 1.4em; text-align: middle; margin-top: 2.5em"}

$$
{Z(\mathbf{s}): \mathbf{s} \in D \subset \mathbb{R}^d}
$$
:::

## Areal Data
:::{style="font-size: 1.4em; text-align: middle; margin-top: 1em"}
$$
{Z(\mathbf{s}): \mathbf{s} \in D \subset \mathbb{R}^d}
$$
:::

::: columns
::: {.column width="40%"}
- $D$ is fixed domain of countable units

- Typically involve some aggregation

:::
::: {.column width="60%"}
```{r}
#| echo: false
#| cache: true
#| message: false

library(sf)
library(tidyverse)
cejst <- st_read("/Users/mattwilliamson/Google Drive/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/cejst_nw.shp", quiet=TRUE) %>% 
  filter(!st_is_empty(.))

plot(cejst["EBLR_PFS"], main="Expected Annual Building Loss Rate")
```
:::
:::

## Geostatistical data

:::{style="font-size: 1.4em; text-align: middle; margin-top: 1em"}
$$
{Z(\mathbf{s}): \mathbf{s} \in D \subset \mathbb{R}^d}
$$
:::

::: columns
::: {.column width="60%"}
![Mitzi Morris](img/slide_3/mitzi_bikeinjury.jpg)
:::
::: {.column width="40%"}
- $D$ is a fixed subset of $\mathbb{R}^d$ 

- $Z(\mathbf{s})$ could be observed at any location within $D$.

- Models predict unobserved locations
:::
:::

## Point patterns

:::{style="font-size: 1.4em; text-align: middle; margin-top: -1em; margin-bottom: -1.25em"}
$$
{Z(\mathbf{s}): \mathbf{s} \in D \subset \mathbb{R}^d}
$$
:::

- $D$ is random; where $\mathbf{s}$ depicts the location of events

![](img/slide_3/Ben-Said.png)

::: footer 
:::{style="font-size: 0.8em; margin-bottom: -1.5em; color:#fff"}
Ben-Said, M. Ecol Process 10, 56 (2021). 
:::
:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
How is the data stored?
:::

## What is a data model?

::: {.incremental}
- **Data:** a collection of discrete values that describe phenomena

- Your brain stores millions of pieces of data

- Computers are not your brain
  - Need to organize data systematically
  - Be able to display and access efficiently
  - Need to be able to store and access repeatedly

- Data models solve this problem
:::

## 2 Types of Spatial Data Models

 - **Raster:** grid-cell tessellation of an area. Each raster describes the value of a single phenomenon. More next week... 
 
 - **Vector:** (many) attributes associated with locations defined by coordinates
 
## The Vector Data Model

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- __Vertices__ (i.e., discrete x-y locations) define the shape of the vector

- The organization of those vertices define the _shape_ of the vector

- General types: points, lines, polygons
:::
:::
::: {.column width="40%"}
![Image Source: Colin Williams (NEON)](img/slide_3/points-lines-polygons-vector-data-types.png)
:::
:::


# {background-image="img/slide_3/landscape_geometry.jpeg"}

::: footer
Image Source: QGIS User's manual
:::

## Vectors in Action {background-image="img/slide_3/landscape_geometry.jpeg" background-opacity="0.5"}

::: {.incremental}
* Useful for locations with discrete, well-defined boundaries

* Very precise (not necessarily accurate)

:::
::: footer
Image Source: QGIS User's manual
:::

## The Raster Data Model

::: columns
::: {.column width="50%"}
::: {style="font-size: 0.8em"}
* __Raster data__ represent spatially continuous phenomena (`NA` is possible)

* Depict the alignment of data on a regular lattice (often a square)

* Geometry is implicit; the spatial extent and number of rows and columns define the cell size

:::
:::
::: {.column width="50%"}
```{r}
#| fig-height: 6
#| fig-width: 6
#| echo: false

library(terra)
filename <- system.file("ex/elev.tif", package="terra")
r <- rast(filename)
plot(r, col=gray(0:1000/1000), main = "Elevation (m)")
```
:::
:::

## Types of Raster Data

::: columns
:::{.column width="50%"}

```{r}
#| fig-height: 6
#| fig-width: 6
#| echo: false
library(stars)
x = 1:5
y = 1:4
d = st_dimensions(x = x, y = y, .raster = c("x", "y"))
m = matrix(runif(20),5,4)
r1 = st_as_stars(r = m, dimensions = d)

r = attr(d, "raster")
r$affine = c(0.2, -0.2)
attr(d, "raster") = r
r2 = st_as_stars(r = m, dimensions = d)

r = attr(d, "raster")
r$affine = c(0.1, -0.3)
attr(d, "raster") = r
r3 = st_as_stars(r = m, dimensions = d)

x = c(1, 2, 3.5, 5, 6)
y = c(1, 1.5, 3, 3.5)
d = st_dimensions(x = x, y = y, .raster = c("x", "y"))
r4 = st_as_stars(r = m, dimensions = d)

grd = st_make_grid(cellsize = c(10,10), offset = c(-130,10), n = c(8,5), crs = st_crs(4326))
r5 = st_transform(grd, "+proj=laea +lon_0=-70 +lat_0=35")

par(mfrow = c(2,3), mar = c(0.1, 1, 1.1, 1))
r1 = st_make_grid(cellsize = c(1,1), n = c(5,4), offset = c(0,0))
plot(r1, main = "regular")
plot(st_geometry(st_as_sf(r2)), main = "rotated")
plot(st_geometry(st_as_sf(r3)), main = "sheared")
plot(st_geometry(st_as_sf(r4, as_points = FALSE)), main = "rectilinear")
plot(st_geometry((r5)), main = "curvilinear")
par(mfrow = c(1,1), mar= c(5.1, 4.1, 4.1, 2.1))
```
:::
::: {.column width="50%"}
::: {style="font-size: 0.8em"}
* __Regular__: constant cell size; axes aligned with Easting and Northing

* __Rotated__: constant cell size; axes not aligned with Easting and Northing

* __Sheared__: constant cell size; axes not parallel

* __Rectilinear__: cell size varies along a dimension

* __Curvilinear__: cell size and orientation dependent on the other dimension

:::
:::
:::

## Types of Raster Data

* __Continuous__: numeric data representing a measurement (e.g., elevation, precipitation)

* __Categorical__: integer data representing factors (e.g., land use, land cover)

::: columns
:::{.column width="50%"}

```{r}
#| echo: false
mintemp <- rast("ftp://ftp.hafro.is/pub/data/rasters/Iceland_minbtemp.tif")
plot(mintemp)
```
:::
::: {.column width="50%"}

```{r}
#| echo: false

cm <- matrix(c(
  -2, 2, 0,
  2, 4, 1,
  4, 10, 2), ncol = 3, byrow = TRUE)

# Create a raster with integers
temp_reclass <- classify(mintemp, cm)
tempcats <- c("cold", "mild", "warm")
levels(temp_reclass) <- tempcats
plot(temp_reclass)
```
:::
:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
What makes data (geo)spatial?
:::

## Location vs. Place
::: columns
::: {.column width="50%"}
::: incremental
::: {style="font-size: 0.8em"}
* **Place:** an area having unique **physical** and **human** characteristics **interconnected** with other places

* **Location:** the actual position on the earth's surface

* **Sense of Place:** the emotions someone attaches to an area based on experiences

* Place is *location plus meaning*

:::
:::
:::
::: {.column width="50%"}
::: incremental
- __nominal: (potentially contested) place names__

- __absolute: the physical location on the earth's surface__
:::
:::
:::

## Describing Absolute Locations

- **Coordinates:** 2 or more measurements that specify location relative to a _reference system_

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- Cartesian coordinate system

- _origin (O)_ = the point at which both measurement systems intersect

- Adaptable to multiple dimensions (e.g. *z* for altitude)
:::
:::
::: {.column width="40%"}
![Cartesian Coordinate System](img/slide_3/CartesianCoordinateSystem.png)
:::
:::

## Locations on a Globe

- The earth is not flat...


![Latitude and Longitude](img/slide_6/Latitude_and_Longitude.png)

## Locations on a Globe

- The earth is not flat...

- Global Reference Systems (GRS)

- _Graticule_: the grid formed by the intersection of longitude and latitude

- The graticule is based on an ellipsoid model of earth's surface and contained in the _datum_


## Global Reference Systems
::: {style="font-size: 1.2em; text-align: center"}
__The *datum* describes which ellipsoid to use and the precise relations between locations on earth's surface and Cartesian coordinates__
:::

- Geodetic datums (e.g., `WGS84`): distance from earth's center of gravity

- Local data (e.g., `NAD83`): better models for local variation in earth's surface

## Describing location: extent
::: incremental
- How much of the world does the data cover?

- For rasters, these are the corners of the lattice

- For vectors, we call this the bounding box
:::

## Describing location: resolution

::: columns
::: {.column width="40%"}
::: incremental
-   **Resolution:** the accuracy that the location and shape of a map's features can be depicted

-   **Minimum Mapping Unit:** The minimum size and dimensions that can be reliably represented at a given _map scale_. 

-   Map scale vs. scale of analysis
:::
:::
::: {.column width="60%"}

```{r}
#| echo: false
#| message: false
library(terra)  
f <- system.file("ex/elev.tif", package="terra")
r <- rast(f)
r.agg <- aggregate(r, fact=4)
par(mfrow=c(1,2))
plot(r)
plot(r.agg)
par(mfrow=c(1,1))
```

:::
:::
# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
The earth is not flat...
:::

## Projections

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- But maps, screens, and publications are...

- **Projections** describe *how* the data should be translated to a flat surface

- Rely on 'developable surfaces'

- Described by the Coordinate Reference System (CRS)
:::
:::
::: {.column width="40%"}
![Developable Surfaces](img/slide_3/projections.png)
:::
::: 
 
::: {style="font-size: 1.1em; text-align: center"}
[__Projection necessarily induces some form of distortion (tearing, compression, or shearing)__]{style="color:#771C6D"}
:::


## Coordinate Reference Systems

::: {style="font-size: 0.8em"}

-   Some projections minimize distortion of angle, area, or distance

-   Others attempt to avoid extreme distortion of any kind 

-   Includes: Datum, ellipsoid, units, and other information (e.g., False Easting, Central Meridian) to further map the projection to the GCS

-   Not all projections have/require all of the parameters
:::

```{r}
#| echo: false
#| cache: true
#| message: false
#| fig-width: 10

library(tigris)

b <- states(progress_bar = FALSE) %>% 
  filter(STUSPS %in% c("WA", "OR", "ID"))
b.a <- b %>% st_transform(., crs = 2991)
b.b <- b %>% st_transform(., crs = 5070)
par(mfrow=c(1,3), cex.main = 3)
plot(b$geometry, main = "Geodetic")
plot(b.a$geometry, main = "Lambert Conformal")
plot(b.b$geometry, main = "Albers Equal Area")
par(mfrow=c(1,1), cex.main=1.2)
```
## Choosing Projections
::: columns
::: {.column width="40%"}
![](img/slide_3/distortion.png)
:::
::: {.column width="60%"}

- Equal-area for thematic maps

- Conformal for presentations

- Mercator or equidistant for navigation and distance

:::
:::

# {background="#9F281A"}
:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
Geometries, support, and spatial messiness
:::

## Geometries

::: columns
::: {.column width="40%"}
-   Vectors store aggregate the locations of a feature into a geometry
-   Most vector operations require simple, valid geometries
:::
::: {.column width="60%"}
![Image Source: Colin Williams (NEON)](img/slide_3/points-lines-polygons-vector-data-types.png)
:::
:::

## Valid Geometries
::: {style="font-size: 0.8em"} 
-   A `linestring` is _simple_ if it does not intersect
-   Valid polygons
  -   Are closed (i.e., the last vertex equals the first)
  -   Have holes (inner rings) that inside the the exterior boundary
  -   Have holes that touch the exterior at no more than one vertex (they don't extend across a line)
    -   For multipolygons, adjacent polygons touch only at points
  -   Do not repeat their own path

:::

##
```{r}
#| echo: false
#| fig-width: 10

ls = st_linestring(rbind(c(0,0), c(1,1), 
                          c(2,2), c(0,2), 
                          c(1,1), c(2,0)))
p1 = st_as_sfc("POLYGON((0 0, 0 10, 10 0, 10 10, 0 0))")
x = st_sfc(st_polygon(list(rbind(c(0,0),c(0.5,0),c(0.5,0.5),c(0.5,0),c(1,0),c(1,1),c(0,1),c(0,0)))))

par(mfrow=c(1,3))
plot(ls)
plot(p1)
plot(x)
par(mfrow = c(1,1))
```


## Empty Geometries

* Empty geometries arise when an operation produces `NULL` outcomes (like looking for the intersection between two non-intersecting polygons)

* `sf` allows empty geometries to make sure that information about the data type is retained

* Similar to a `data.frame` with no rows or a `list` with `NULL` values

* Most vector operations require simple, valid geometries


## Support
* __Support__ is the area to which an attribute applies.

::: incremental

*   For vectors, the attribute-geometry-relationship can be:
  *   __constant__ = applies to every point in the geometry (lines and polygons are just lots of points)
  *   __identity__ = a value unique to a geometry
  *   __aggregate__ = a single value that integrates data across the geometry

*   Rasters can have __point__ (attribute refers to the cell center) or __cell__ (attribute refers to an area similar to the pixel) support

:::

## Spatial Messiness

* Quantitative geography requires that our data are aligned

* Achieving alignment is part of reproducible workflows

* Making principled decisions about projections, resolution, extent, etc

# {background="#9F281A"}

:::{style="font-size: 1.4em; text-align: middle; margin-top: 2em"}
End
:::
