---
title: "Integrating Rasters and Vector Data"
subtitle: "HES 505 Fall 2023: Session 16"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

```{r}
#| include: false
library(sf)
library(tidyverse)
library(terra)
library(tigris)
library(tmap)
```

# Today's Plan {background="#43464B" background-image="img/slide_14/bison.png"}


## Objectives

- Use `dplyr` with `predicates` and `measures` to subset and manipulate data

- Use `extract` to access raster data

- Use `zonal` to summarize access data

- Join data into a single analyzable dataframe


# Motivating Question {background="#9F281A"}

> How do Collaborative Forest Landscape Restoration projects compare to other National Forest lands with respect to social and wildfire risks?

## Thinking about the data

* **Datasets** - Forest Service Boundaries, CFLRP Boundaries, Wildfire Risk Raster, CEJST shapefile

* **Dependent Variable** - CFLRP (T or F)

* **Independent Variables** - Wildfire hazard, income, education, housing burdent

## Building some Pseudocode

```{r}
#| eval: false
#| echo: true

1. Load Libraries
2. Load data
3. Check validity and alignment
4. Subset to relevant geographies
5. Select relevant attributes
6. Extract wildfire risk
7. CFLRP T or F

```

## Load libraries

```{r}
#| echo: true
library(sf)
library(terra)
library(tidyverse)
library(tmap)

```


## Load the data

- Downloading USFS data using tempfiles and `unzip`

```{r}
#| echo: true
#| cache: true

### FS Boundaries
tmp <- tempfile()
fs.url <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.AdministrativeForest.zip"
download.file(fs.url, tmp)
tmp2 <- tempfile()
unzip(zipfile=tmp, exdir = tmp2 )

fs.bdry <- read_sf(tmp2)

### CFLRP Data
tmp <- tempfile()
cflrp.url <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.CFLR_HPRP_ProjectBoundary.zip"
download.file(cflrp.url, tmp)
tmp2 <- tempfile()
unzip(zipfile=tmp, exdir = tmp2 )
cflrp.bdry <- read_sf(tmp2)
```

## Load the data

- From our class folder

```{r}
#| echo: true

### Wildfire Hazard Data
wildfire.haz <- rast("opt/data/2023/assignment01/wildfire_hazard_agg.tif")

## CEJST data
cejst <- read_sf("opt/data/2023/assignment01/cejst_pnw.shp")


```

## Check Validity

- The USFS datasets are new; let's check the geometries

```{r}
#| echo: true

all(st_is_valid(fs.bdry))
all(st_is_valid(cflrp.bdry))


```

- Make them valid

```{r}
#| echo: true
#| cache: true

fs.bdry.valid <- st_make_valid(fs.bdry)
all(st_is_valid(fs.bdry.valid))
cflrp.bdry.valid <- st_make_valid(cflrp.bdry)
all(st_is_valid(cflrp.bdry.valid))

```

## Set Projection

- We know these are in different CRS

- Project to the CRS of the `raster`

- Using ` %>% ` to pipe data through the function

```{r}
#| echo: true

cflrp.proj <- cflrp.bdry.valid %>% st_transform(., crs=crs(wildfire.haz))
cejst.proj <- cejst %>% st_transform(., crs=crs(wildfire.haz))
fs.proj <- fs.bdry.valid %>% st_transform(., crs=crs(wildfire.haz))
```

## Subset Geometries

- We can use the `[]` notation to subset the one dataset based on the geometry of the other

- Need USFS and CFLRP within the region

- Then need tracts that overlap USFS

```{r}
#| echo: true

fs.subset <- fs.proj[cejst.proj, ]
cflrp.subset <- cflrp.proj[cejst.proj, ]
cejst.subset <- cejst.proj[fs.subset, ]

```

## Subset geometries

::: columns
::: {.column-width="50%"}

```{r}
#| echo: true
#| cache: true
sub.map <- tm_shape(cejst.subset) +
  tm_polygons(col="gray") +
  tm_shape(fs.subset) + 
  tm_polygons(col="darkgreen") +
  tm_shape(cflrp.subset) +
  tm_polygons(col="goldenrod")
```

:::
::: {.column-width="50%"}

```{r}
#| cache: true

sub.map
```

:::
:::

## Select Relevant Columns

- Use the codebook to identify the right columns

- Then use `select` from `dplyr`

- geometries are sticky!

```{r}
#| echo: true
cejst.df <- cejst.subset %>% 
  select(GEOID10, LMI_PFS, LHE, HBF_PFS)
head(cejst.df)
```

## Extract wildfire data

- Can use `zonal` for one summary statistic

- Or `extract` for multiple

```{r}
#| echo: true
#| cache: true

wildfire.zones <- terra::zonal(wildfire.haz, vect(cejst.df), fun="mean", na.rm=TRUE)

head(wildfire.zones)
```