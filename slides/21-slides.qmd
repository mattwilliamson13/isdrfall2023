---
title: "Spatial Autocorrelation and Areal Data"
subtitle: "HES 505 Fall 2023: Session 21"
author: "Matt Williamson"
execute: 
  eval: true
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

```{r}
#| include: false
library(sf)
library(tidyverse)
library(tmap)
library(spdep)
```

# Objectives {background="#9F281A"}

By the end of today you should be able to:

- Use the `spdep` package to identify the neighbors of a given polygon based on proximity, distance, and minimum number

- Understand the underlying mechanics of Moran's I and calculate it for various neighbors

- Distinguish between global and local measures of spatial autocorrelation

- Visualize neighbors and clusters

# Revisiting Spatial Autocorrelation {background="#9F281A"}

## Spatial Autocorrelation

::: columns
:::{.column width="60%"}

- Attributes (features) are often non-randomly distributed

- Especially true with aggregated data

- Interest is in the relationship between proximity and the feature

- Difference from kriging and semivariance
:::
:::{.column width="40%"}
![From Manuel Gimond](img/slide_17/Random_maps.png)
:::
:::

## Moran's I

::: columns
::: {.column width="30%"}
* Moran's I

![](img/slide_17/MI.png)
:::
::: {.column width="70%"}

![](img/slide_17/mI2.png)
:::
:::


## Finding Neighbors


- How do we define $I(d)$ for areal data?

- What about $w_{ij}$?

- We can use `spdep` for that!!

![](img/slide_21/spatial_contiguity.png){width=110%}
:::
:::

## Using `spdep`

```{r}
#| echo: true

cdc <- read_sf("data/opt/data/2023/vectorexample/cdc_nw.shp") %>% 
  select(stateabbr, countyname, countyfips, casthma_cr)

```

```{r}
#| echo: false

tm_shape(cdc) +
  tm_fill("casthma_cr",
          palette="Reds",
          style="quantile",
          title="percent of people with chronic asthma")+
  tm_borders(alpha = 0.4) +
  tm_legend(legend.outside=TRUE)
```
:::
:::

## Finding Neighbors 


- Queen, rook, (and bishop) cases impose neighbors by contiguity

- Weights calculated as a $1/ num. of neighbors$

```{r}
#| echo: true
#| cache: true

nb.qn <- poly2nb(cdc, queen=TRUE)
nb.rk <- poly2nb(cdc, queen=FALSE)

```

## Finding Neighbors

```{r}
#| cache: true
par(mfrow=c(1,2))
plot(st_geometry(cdc), border = 'lightgrey')
plot(nb.qn, sp::coordinates(as(cdc, "Spatial")), add=TRUE, col='red', main="Queen's case")
plot(st_geometry(cdc), border = 'lightgrey')
plot(nb.rk, sp::coordinates(as(cdc, "Spatial")), add=TRUE, col='blue', main="Rook's case")
par(mfrow=c(1,1))
```


## Getting Weights

::: columns
::: {.column width="60%"}

```{r}
#| echo: true
lw.qn <- nb2listw(nb.qn, style="W", zero.policy = TRUE)
lw.qn$weights[1:5]
asthma.lag <- lag.listw(lw.qn, cdc$casthma_cr)

```
:::
::: {.column width="40%"}
```{r}
head(cbind(cdc$countyname, cdc$casthma_cr, asthma.lag))
```
:::
:::

## Fit a model

* Moran's I coefficient is the slope of the regression of the _lagged_ asthma percentage vs. the asthma percentage in the tract 

* More generally it is the slope of the lagged average to the measurement


```{r}
#| echo: true


M <- lm(asthma.lag ~ cdc$casthma_cr)
```

```{r}
# Plot the data
plot( asthma.lag ~ cdc$casthma_cr, pch=20, asp=1, las=1)
abline(a = coef(M)[1], b=coef(M)[2], col="red")
coef(M)[2]
```


## Comparing observed to expected

* We can generate the expected distribution of Moran's I coefficients under a Null hypothesis of no spatial autocorrelation

* Using permutation and a loop to generate simulations of Moran's I

```{r}
#| echo: true
n <- 400L   # Define the number of simulations
I.r <- vector(length=n)  # Create an empty vector

for (i in 1:n){
  # Randomly shuffle income values
  x <- sample(cdc$casthma_cr, replace=FALSE)
  # Compute new set of lagged values
  x.lag <- lag.listw(lw.qn, x)
  # Compute the regression slope and store its value
  M.r    <- lm(x.lag ~ x)
  I.r[i] <- coef(M.r)[2]
}

```

```{r}
hist(I.r, main=NULL, xlab="Moran's I", las=1)
abline(v=coef(M)[2], col="red")
```

