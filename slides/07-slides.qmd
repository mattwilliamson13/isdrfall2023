---
title: "Spatial Data as Vectors"
subtitle: "HES 505 Fall 2022: Session 7"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background-image="img/slide_7/mining_idaho.jpeg" background-opacity="0.7"}

::: footer
Image Source: Wikimedia Commons
:::

## Objectives

- Articulate the role of the data model in geographic information systems

- Describe the key elements of vector data

- Use the `sf` package to read and manipulate vector data

- Define `geometry` in the context of vector objects and troubleshoot common problems

## What is a data model?

::: {.incremental}
- **Data:** a collection of discrete values that describe phenomena

- Your brain stores millions of pieces of data

- Computers are not your brain
  - Need to organize data systematically
  - Be able to display and access efficiently
  - Need to be able to store and access repeatedly

- Data models solve this problem
:::

## 2 Types of Spatial Data Models

 - **Raster:** grid-cell tessellation of an area. Each raster describes the value of a single phenomenon. More next week... 
 
 - **Vector:** (many) attributes associated with locations defined by coordinates
 
## The Vector Data Model

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- __Vertices__ (i.e., discrete x-y locations) define the shape of the vector

- The organization of those vertices define the _shape_ of the vector

- General types: points, lines, polygons
:::
:::
::: {.column width="40%"}
![Image Source: Colin Williams (NEON)](img/slide_7/points-lines-polygons-vector-data-types.png)
:::
:::


# {background-image="img/slide_7/landscape_geometry.jpeg"}

::: footer
Image Source: QGIS User's manual
:::

## Vectors in Action {background-image="img/slide_7/landscape_geometry.jpeg" background-opacity="0.5"}

::: {.incremental}
* Useful for locations with discrete, well-defined boundaries

* Very precise (not necessarily accurate)

* Not the same as the `vector` data class
:::
::: footer
Image Source: QGIS User's manual
:::

# Vectors in `R` {background="#0033A0"}

## Representing vector data in R

::: columns
::: {.column width="40%"}
![From Lovelace et al.](img/slide_7/sf-classes.png)
:::
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
* `sf` hierarchy reflects increasing complexity of geometry
  * `st_point`, `st_linestring`, `st_polygon` for single features
  * `st_multi*` for multiple features of the same type
  * `st_geometrycollection` for multiple feature types
  * `st_as_sfc` creates the geometry list column for many `sf` operations
:::
:::
:::

## Points

```{r}
#| echo: true
library(sf)
proj <- st_crs('+proj=longlat +datum=WGS84')
long <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
lat <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
st_multipoint(cbind(long, lat)) %>% st_sfc(., crs = proj)
```
## Points
```{r}
#| echo: true
plot(st_multipoint(cbind(long, lat)) %>% 
                   st_sfc(., crs = proj))
```

## Lines

```{r}
#| echo: true
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
pts <- st_multipoint(lonlat)

sfline <- st_multilinestring(list(pts[1:3,], pts[4:7,]))
str(sfline)
```

## Lines

```{r}
#| echo: true

plot(st_multilinestring(list(pts[1:3,], pts[4:7,])))
```
## Polygons

```{r}
#| echo: true

outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
coords = list(outer, hole1, hole2)
pl1 = st_polygon(coords)
```

## Polygons
```{r}
#| echo: true
plot(pl1)
```

## But what about actual data?
::: {style="font-size: 0.8em"} 
Convert a data frame to `sf` object

* Useful for situations where point locations given as columns in spreadsheet
* Requires that you the projection used when the data were collected 
* Using the `meuse` dataset (use `?sp::meuse` to learn more about it)
:::

```{r}
#| echo: true
library(sp)
data(meuse)
head(meuse, n=3)[,1:10]
```

# Convert a data frame to `sf` object


::: {style="font-size: 0.7em"} 
 * Using the `x` and `y` columns in the data
 * `agr` defines the attribute-geometry-relationship
 * `constant`, `aggregate`, and `identity`
:::

```{r}
#| echo: true
meuse_sf = st_as_sf(meuse, coords = c("x", "y"), 
                    crs = 28992, agr = 
                      "constant")
meuse_sf[1:2,1:10]
```

## Plotting `sf` objects

* Quick way to check your data
* Remember that `sf` has `geometry` and `attributes`

```{r}
#| echo: true
plot(meuse_sf)
```

## Plotting `sf` objects

```{r}
#| echo: true
plot(meuse_sf['lead'])
```

## Plotting `sf` objects

```{r}
#| echo: true

plot(st_geometry(meuse_sf))
```

## Common Problems with Vector Data

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
 * Vectors and scale
 
 * Slivers and overlaps 
 
 * Undershoots and overshoots
 
 * Self-intersections and rings
:::
:::
::: {.column width="40%"}
![Topology Errors - Saylor Acad.](img/slide_7/topology_errors.png)
:::
:::

:::{style="font-size: 1.2em; text-align: middle"}
We'll use `st_is_valid()` to check this, but fixing can be tricky
:::

## Fixing Problematic Topology

* `st_make_valid()` for simple cases

* `st_buffer` with `dist=0` 

* More complex errors need more [complex approaches](https://r-spatial.org/r/2017/03/19/invalid.html)

## A Note on Vectors 

> Moving forward we will rely primarily on the `sf` package for vector manipulation. Some packages require objects to be a different class. `terra`, for example, relies on `SpatVectors`. You can use `as()` to coerce objects from one type to another (assuming a method exists). You can also explore other packages. Many packages provide access to the 'spatial' backbones of `R` (like `geos` and `gdal`), they just differ in how the "verbs" are specified. For `sf` operations the `st_` prefix is typical. For `rgeos` operations, the `g` prefix is common.

