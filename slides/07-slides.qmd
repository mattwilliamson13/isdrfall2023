---
title: "Coordinates and Geometries"
subtitle: "HES 505 Fall 2023: Session 7"
author: "Matt Williamson"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background-image="img/slide_7/mining_idaho.jpeg" background-opacity="0.7"}

::: footer
Image Source: Wikimedia Commons
:::

## Objectives

- Understand the linkage between location, coordinates, coordinate reference systems, and geometry

- Access and manipulate geometries in `R` with `sf` (and `terra`)

- Define `geometry` in the context of vector objects and troubleshoot common problems

- Change the CRS for vectors and rasters (and understand the implications)

# But first... {background="#9F281A"}

## Getting more acquainted with `R`

- Objects, classes, functions, oh my... 

- Intuition for the [`tidyverse`](https://jhudatascience.org/tidyversecourse/intro.html) 
- Getting used to pipes (` %>% ` or `|>`)

- Learning to prototype

# Getting help {background="#9F281A"}

## 2 Kinds of Errors {background="#43464B" background-image="img/slide_7/ducks.jpeg" background-opacity="0.6"}

* **Syntax Errors**: Your code won't actually run
* **Semantic Errors**: Your code runs without error, but the result is unexpected

## Asking better questions, getting better answers

* Places to get help (Google, Slack, [Stack Overflow](https://stackoverflow.com/help/how-to-ask?ref=dataschool.io), Github Issue pages)

* What are you trying to do? (the outcome you want/expect)

* What isn't working? (the code and steps you've tried so far)

* Why aren't common solutions working? (proof that you've done your due diligence)

## Reproducible examples

* Don't require someone to have your data or your computer

* Minimal amount of information and code to reproduce your error

* Includes both code and your operating environment info

* [More info](https://stackoverflow.com/help/minimal-reproducible-example?ref=dataschool.io
)

* An [example](https://gis.stackexchange.com/questions/268841/fit-two-sf-polygons-seamlessly) with spatial data

# Coordinates and Geometries {background="#9F281A"}

## Reference Systems

- To locate an object or quantity, we need:
  * A fixed _origin_ (or **datum**) to measure distances to/from
  * A _measurement unit_ (or **scale**) that defines the units of distance
  * **Datum** + **scale** = **reference system**

## Coordinate Reference Systems

::: incremental
- Map the location on an object to earth (geodetic) or flat (projected) surfaces

- **Coordinate System** - the mathematical rules that specify how coordinates are assigned to points

- **Datum** - the parameter or set of parameters that define the position of the origin, the scale, and the orientation of a coordinate system

- **Coordinate Reference Systems** - a coordinate system that is related to an object by a datum
:::
## Accessing CRS with `R`

- `sf::st_crs()` for vector data

- `terra::crs()` for raster data

- stored in WKT, epsg, or proj4string (deprecated)

- The [EPSG](https://epsg.io/) website is a great reference for getting projection info

## Accessing CRS with `R`

```{r}
#| echo: true
#| code-line-numbers: "3,4,5"
dir.for.files <- "/Users/mattwilliamson/Library/CloudStorage/GoogleDrive-mattwilliamson@boisestate.edu/My Drive/TEACHING/Intro_Spatial_Data_R/Data/2023/assignment01/"
vector.data <- sf::st_read(dsn = paste0(dir.for.files, "cejst_nw.shp"), quiet=TRUE)
sf::st_crs(x = vector.data)$input
sf::st_crs(x = vector.data)$proj4string
sf::st_crs(x = vector.data)$wkt
```

## Accessing CRS with `R`

```{r}
#| echo: true
#| code-line-numbers: "2"

raster.data <- terra::rast(x = paste0(dir.for.files, "wildfire_hazard_agg.tif"))
terra::crs(raster.data, describe=TRUE, proj=TRUE)
```

## What if you don't know the CRS?
:::{style="font-size: 0.8em"}

- Sometimes you receive data that is missing the projection

- You can assign it (**with caution**)

- You can guess it using [`crsuggest::guess_crs()`](https://github.com/walkerke/crsuggest)
:::

```{r}
#| echo: true


library(sf)
library(mapview)
locations <- data.frame(
  X = c(1200822.97857801, 1205015.51644983, 1202297.44383987, 1205877.68696743, 
        1194763.21511923, 1195463.42403192, 1199836.01037452, 1207081.96500368, 
        1201924.15986897),
  Y = c(1246476.31475063, 1248612.72571423, 1241479.45996392, 1243898.58428024, 
        1246033.7550009, 1241827.7730307, 1234691.50899912, 1251125.67808482, 
        1252188.4333016),
  id = 1:9
)

locations_sf <- st_as_sf(locations, coords = c("X", "Y"))

```

## 
```{r}
#| echo: false
#| message: false

library(tidyverse)
library(terra)
library(sf)
mapview(locations_sf)
```

## Guessing CRS

```{r}
#| echo: true
#| 
library(crsuggest)
guess_crs(locations_sf, "Chennai, India", n_return = 5)
st_crs(locations_sf) <- 7785

```

##
```{r}
#| echo: false
mapview(locations_sf)
```

# {background="#9F281A"}

>All spatial analysis and mapping requires that your data is aligned correctly.

## Changing the CRS

- Requires recomputing coordinates

- Coordinate Conversion - No change to the datum; lossless

- Coordinate Transformation - New datum; relies on models; some error involved

## Changing the CRS in `R`

- `sf::st_transform` for vectors

- `terra::project` for rasters

- **Projecting Rasters Causes Distortion**

## Changing the CRS in `R`

```{r}
#| echo: true
#| code-line-numbers: "1,2,4,5"


vector.data.proj <- vector.data %>% 
  sf::st_transform(., crs = 3083)
st_crs(vector.data.proj)$input

vector.data.proj.rast <- vector.data %>% 
  sf::st_transform(., crs = crs(raster.data))
st_crs(vector.data.proj.rast)$proj4string
```

## Changing the CRS in `R`

```{r}
#| echo: true

raster.data.proj <- project(x = raster.data, y = "EPSG:3083")
crs(raster.data.proj, describe=TRUE, proj=TRUE)

raster.data.proj.vect <- project(x = raster.data, y = vect(vector.data))
crs(raster.data.proj.vect, describe=TRUE, proj=TRUE)

```

# Geometries {background="#9F281A"}



 
## The Vector Data Model

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
- Coordinates define the __Vertices__ (i.e., discrete x-y locations) that comprise the geometry

- The organization of those vertices define the _shape_ of the vector

- General types: points, lines, polygons
:::
:::
::: {.column width="40%"}
![](img/slide_7/points-lines-polygons-vector-data-types.png)
:::
:::


## Representing vector data in R

::: columns
::: {.column width="40%"}
![From Lovelace et al.](img/slide_7/sf-classes.png)
:::
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
* `sf` hierarchy reflects increasing complexity of geometry
  * `st_point`, `st_linestring`, `st_polygon` for single features
  * `st_multi*` for multiple features of the same type
  * `st_geometrycollection` for multiple feature types
  * `st_as_sfc` creates the geometry list column for many `sf` operations
:::
:::
:::

## Points

```{r}
#| echo: true
library(sf)
proj <- st_crs('+proj=longlat +datum=WGS84')
long <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
lat <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
st_multipoint(cbind(long, lat)) %>% st_sfc(., crs = proj)
```
## Points
```{r}
#| echo: true
plot(st_multipoint(cbind(long, lat)) %>% 
                   st_sfc(., crs = proj))
```

## Lines

```{r}
#| echo: true
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
pts <- st_multipoint(lonlat)

sfline <- st_multilinestring(list(pts[1:3,], pts[4:7,]))
str(sfline)
```

## Lines

```{r}
#| echo: true

plot(st_multilinestring(list(pts[1:3,], pts[4:7,])))
```
## Polygons

```{r}
#| echo: true

outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
coords = list(outer, hole1, hole2)
pl1 = st_polygon(coords)
```

## Polygons
```{r}
#| echo: true
plot(pl1)
```

## Common Problems with Vector Data

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.8em"} 
 * Vectors and scale
 
 * Slivers and overlaps 
 
 * Undershoots and overshoots
 
 * Self-intersections and rings
:::
:::
::: {.column width="40%"}
![Topology Errors - Saylor Acad.](img/slide_7/topology_errors.png)
:::
:::

:::{style="font-size: 1.2em; text-align: middle"}
We'll use `st_is_valid()` to check this, but fixing can be tricky
:::

## Fixing Problematic Topology

* `st_make_valid()` for simple cases

* `st_buffer` with `dist=0` 

* More complex errors need more [complex approaches](https://r-spatial.org/r/2017/03/19/invalid.html)

## A Note on Vectors 

> Moving forward we will rely primarily on the `sf` package for vector manipulation. Some packages require objects to be a different class. `terra`, for example, relies on `SpatVectors`. You can use `as()` to coerce objects from one type to another (assuming a method exists). You can also explore other packages. Many packages provide access to the 'spatial' backbones of `R` (like `geos` and `gdal`), they just differ in how the "verbs" are specified. For `sf` operations the `st_` prefix is typical. For `rgeos` operations, the `g` prefix is common.

